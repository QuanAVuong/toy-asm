VADD_3    :    prints  X[i] + Y[i]         for 0 <= i < n    (adapted from VADD_2)

: This subprogram is the second of a sequence of suggested stepping stones to the assigned VADD subprogram
:
: VADD_0    :    does nothing                                  (minimal precursor to the assigned VADD subprogram) 
: VADD_1    :    prints  Z[i]                for 0 <= i < n    (copied  from VectorAdditionDriver.toy) 
: VADD_2    :    prints  Y[i]                for 0 <= i < n    (adapted from VADD_1) 
: VADD_3    :    prints  X[i] + Y[i]         for 0 <= i < n    (adapted from VADD_2) 
: VADD      :    assigns X[i] + Y[i] to Z[i] for 0 <= i < n    (the assigned subprogram, adapted from VADD_3) 

: VADD subprogram interface
:
: label VADD
:
: on entry
:	 $1 = 1 (constant)
:	 $B = n = |Z| = |Y| = |X|
:	 $C = @X
:	 $D = @Y
:	 $E = @Z
:	 $F = <return address>
:
: on exit
:	 $Z[i] = X[i] + Y[i] for 0 <= i < n, otherwise, memory is unchanged
:	 registers: $0, $1, $B, $C, $D, $E and $F have not been changed
:	 the values in registers: $2 .. $A may have been changed

: Note
:       This implementation assumes the "on entry" guarantees of this interface, 
:       but does NOT fulfill its "on exit" requirements!

: subprogram register usage
: 	 $2 =    j  (loop index)
:	 $3 = @Z[j]
:	 $A =  Z[j]

VADD
        mov     $2,     $0      : j = $2 = 0
LOOP
        cmp     $2,     $B	    : j ? n
        buge            @DONE	:
            : j < n
        add	    $3, $C, $2      : $3 = @X[j]
        l       $4,     $3     	: $4 =  X[j]
        mov	    $A,     $4      : $A =  X[j] to be written to console
        write	            	: print X[j] in command window

        add	    $5, $D, $2      : $5 = @Y[j]
        l       $6,     $5     	: $6 =  Y[j]
        mov	    $A,     $6      : $A =  Y[j] to be written to console
        write	            	: print Y[j] in command window

        add	    $7, $4, $6      : $7 =  X[i] + Y[i]
        mov	    $A,     $7      : $A =  X[i] + Y[i] to be written to console
        write	            	: print X[i] + Y[i] in command window

        add     $2, $2, $1 	: j <- j + 1
        b	      @LOOP 	: repeat loop body
DONE
        ret	            	: return to caller [	blc	ALL, $F, $0]
