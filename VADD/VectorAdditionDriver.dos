: Vector Addition (HW 11) driver
:      calls subprogram VADD to compute the vector sum (Z[i] = X[i] + Y[i] : 0 <= i < |Z|)
:      then prints the elements of Z

: homework command line (linux, MAC OS X, other Unix)
:
:         java -jar Toy.jar VectorAdditionDriver.toy VADD.toy >> VADD.out
:
: homework command line (windows)
:
:         java -jar Toy.jar VectorAdditionDriver.dos VADD.dos >> VADD.out
:
: submit: your VADD.toy (or VADD.dos) and VADD.out
:         if your subprogram does not work correctly, so indicate

: VADD subprogram interface
:
: label VADD
:
: on entry
:	 $1 = 1 (constant)
:	 $B = n = |Z| = |Y| = |X|
:	 $C = @X
:	 $D = @Y
:	 $E = @Z
:	 $F = <return address>
:
: on exit
:	 $Z[i] = X[i] + Y[i] for 0 <= i < n, otherwise, memory is unchanged
:	 registers: $0, $1, $B, $C, $D, $E and $F have not been changed
:	 the values in registers: $2 .. $A may have been changed

: driver register usage (subprogram can be different)
: 	 $2 =    j  (loop index)
:	 $3 = @Z[j]
:	 $A =  Z[j]

        lis	 $1,       1 	: $1 = 1
        lis	 $E,      @Z 	: 
        lih	 $E,      @Z 	: $E = @Z
        lis	 $D,      @Y 	: 
        lih	 $D,      @Y 	: $D = @Y
        lis	 $C,      @X 	: 
        lih	 $C,      @X 	: $C = @X
        sub	 $B, $E,  $1 	: $B = @Z[-1] = @|Z|
        l  	 $B, $B      	: $B = |Z| = |Y| = |X| = n (by assumption)
        lis	 $F,    @VADD	: 
        lih	 $F,    @VADD	: $F = @VADD
        cal            : call VADD [	blc	ALL, $F, $F : $F = return address]
        
        exit	            	: terminate execution

: data
                                : array  X
	 8			:  |X|
X	 7			: X[0]
	-3			: X[1]
	12			: X[2]
	-1			: X[3]
	 1			: X[4]
	-5			: X[5]
	10			: X[6]
	 0			: X[7]
:
                                : array  Y
	 8			:  |Y|
Y	 0			: Y[0]
	10			: Y[1]
	-5			: Y[2]
	 8			: Y[3]
	-2			: Y[4]
	 4			: Y[5]
   -11			: Y[6]
	-1			: Y[7]
:
                                : array  Z
	 8			:  |Z|
Z	 0			: Z[0]
	 1			: Z[1]
	 2			: Z[2]
	 3			: Z[3]
	 4			: Z[4]
	 5			: Z[5]
	 6			: Z[6]
	 7			: Z[7]
